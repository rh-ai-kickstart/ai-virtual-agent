/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as ConfigRouteImport } from './routes/config/route';
import { Route as IndexImport } from './routes/index';
import { Route as ConfigUsersImport } from './routes/config/users';
import { Route as ConfigMcpServersImport } from './routes/config/mcp-servers';
import { Route as ConfigKnowledgeBasesImport } from './routes/config/knowledge-bases';
import { Route as ConfigAgentsImport } from './routes/config/agents';

// Create/Update Routes

const ConfigRouteRoute = ConfigRouteImport.update({
  id: '/config',
  path: '/config',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const ConfigUsersRoute = ConfigUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => ConfigRouteRoute,
} as any);

const ConfigMcpServersRoute = ConfigMcpServersImport.update({
  id: '/mcp-servers',
  path: '/mcp-servers',
  getParentRoute: () => ConfigRouteRoute,
} as any);

const ConfigKnowledgeBasesRoute = ConfigKnowledgeBasesImport.update({
  id: '/knowledge-bases',
  path: '/knowledge-bases',
  getParentRoute: () => ConfigRouteRoute,
} as any);

const ConfigAgentsRoute = ConfigAgentsImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => ConfigRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/config': {
      id: '/config';
      path: '/config';
      fullPath: '/config';
      preLoaderRoute: typeof ConfigRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/config/agents': {
      id: '/config/agents';
      path: '/agents';
      fullPath: '/config/agents';
      preLoaderRoute: typeof ConfigAgentsImport;
      parentRoute: typeof ConfigRouteImport;
    };
    '/config/knowledge-bases': {
      id: '/config/knowledge-bases';
      path: '/knowledge-bases';
      fullPath: '/config/knowledge-bases';
      preLoaderRoute: typeof ConfigKnowledgeBasesImport;
      parentRoute: typeof ConfigRouteImport;
    };
    '/config/mcp-servers': {
      id: '/config/mcp-servers';
      path: '/mcp-servers';
      fullPath: '/config/mcp-servers';
      preLoaderRoute: typeof ConfigMcpServersImport;
      parentRoute: typeof ConfigRouteImport;
    };
    '/config/users': {
      id: '/config/users';
      path: '/users';
      fullPath: '/config/users';
      preLoaderRoute: typeof ConfigUsersImport;
      parentRoute: typeof ConfigRouteImport;
    };
  }
}

// Create and export the route tree

interface ConfigRouteRouteChildren {
  ConfigAgentsRoute: typeof ConfigAgentsRoute;
  ConfigKnowledgeBasesRoute: typeof ConfigKnowledgeBasesRoute;
  ConfigMcpServersRoute: typeof ConfigMcpServersRoute;
  ConfigUsersRoute: typeof ConfigUsersRoute;
}

const ConfigRouteRouteChildren: ConfigRouteRouteChildren = {
  ConfigAgentsRoute: ConfigAgentsRoute,
  ConfigKnowledgeBasesRoute: ConfigKnowledgeBasesRoute,
  ConfigMcpServersRoute: ConfigMcpServersRoute,
  ConfigUsersRoute: ConfigUsersRoute,
};

const ConfigRouteRouteWithChildren = ConfigRouteRoute._addFileChildren(ConfigRouteRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/config': typeof ConfigRouteRouteWithChildren;
  '/config/agents': typeof ConfigAgentsRoute;
  '/config/knowledge-bases': typeof ConfigKnowledgeBasesRoute;
  '/config/mcp-servers': typeof ConfigMcpServersRoute;
  '/config/users': typeof ConfigUsersRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/config': typeof ConfigRouteRouteWithChildren;
  '/config/agents': typeof ConfigAgentsRoute;
  '/config/knowledge-bases': typeof ConfigKnowledgeBasesRoute;
  '/config/mcp-servers': typeof ConfigMcpServersRoute;
  '/config/users': typeof ConfigUsersRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/config': typeof ConfigRouteRouteWithChildren;
  '/config/agents': typeof ConfigAgentsRoute;
  '/config/knowledge-bases': typeof ConfigKnowledgeBasesRoute;
  '/config/mcp-servers': typeof ConfigMcpServersRoute;
  '/config/users': typeof ConfigUsersRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/config'
    | '/config/agents'
    | '/config/knowledge-bases'
    | '/config/mcp-servers'
    | '/config/users';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/config'
    | '/config/agents'
    | '/config/knowledge-bases'
    | '/config/mcp-servers'
    | '/config/users';
  id:
    | '__root__'
    | '/'
    | '/config'
    | '/config/agents'
    | '/config/knowledge-bases'
    | '/config/mcp-servers'
    | '/config/users';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ConfigRouteRoute: typeof ConfigRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConfigRouteRoute: ConfigRouteRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/config"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/config": {
      "filePath": "config/route.tsx",
      "children": [
        "/config/agents",
        "/config/knowledge-bases",
        "/config/mcp-servers",
        "/config/users"
      ]
    },
    "/config/agents": {
      "filePath": "config/agents.tsx",
      "parent": "/config"
    },
    "/config/knowledge-bases": {
      "filePath": "config/knowledge-bases.tsx",
      "parent": "/config"
    },
    "/config/mcp-servers": {
      "filePath": "config/mcp-servers.tsx",
      "parent": "/config"
    },
    "/config/users": {
      "filePath": "config/users.tsx",
      "parent": "/config"
    }
  }
}
ROUTE_MANIFEST_END */
