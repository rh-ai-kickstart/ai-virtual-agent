apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mcp-webstore.fullname" . }}-store-api
  labels:
    {{- include "mcp-webstore.labels" . | nindent 4 }}
    app.kubernetes.io/component: store-api
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount.storeApi }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mcp-webstore.storeApiSelectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: store-api
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mcp-webstore.storeApiSelectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: store-api
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mcp-webstore.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.dbInit.enabled }}
        - name: db-init
          image: "postgres:15-alpine"
          command:
            - /bin/bash
            - -c
            - |
              until pg_isready -h {{ include "mcp-webstore.fullname" . }}-postgresql -p 5432; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
          env:
            - name: PGHOST
              value: "{{ include "mcp-webstore.fullname" . }}-postgresql"
            - name: PGPORT
              value: "5432"
        {{- end }}
      containers:
        - name: store-api
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.storeApi.repository }}:{{ .Values.image.storeApi.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.storeApi.pullPolicy }}
          ports:
            - name: http
              containerPort: 8001
              protocol: TCP
          env:
            - name: DATABASE_URL
              value: {{ .Values.env.DATABASE_URL | quote }}
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources.storeApi | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
