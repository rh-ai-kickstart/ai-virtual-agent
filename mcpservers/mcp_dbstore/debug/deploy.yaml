---
# PersistentVolumeClaim for PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  labels:
    app: postgresdb
spec:
  accessModes:
    - ReadWriteOnce # This is typical for a single database instance
  resources:
    requests:
      storage: 1Gi # Adjust storage size as needed
  # storageClassName: "your-storage-class" # Uncomment and specify if you have a specific storage class

---
# Secret for PostgreSQL Credentials
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  labels:
    app: postgresdb
type: Opaque
stringData: # Using stringData for convenience; Kubernetes will base64 encode it
  POSTGRES_USER: "myuser"
  POSTGRES_PASSWORD: "mypassword"
  POSTGRES_DB: "store_db" # Database name to be created

---
# Deployment for PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: postgresdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresdb
  template:
    metadata:
      labels:
        app: postgresdb
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine # Lightweight PostgreSQL for Kubernetes
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_DB
            - name: PGDATA # Data directory
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          # Liveness and Readiness Probes are recommended for production
          # livenessProbe:
          #   tcpSocket:
          #     port: 5432
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          # readinessProbe:
          #   exec:
          #     command:
          #       - "pg_isready"
          #       - "-U"
          #       - "myuser" # Use the user defined in the secret
          #       - "-d"
          #       - "store_db" # Use the db name defined in the secret
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc

---
# Service for PostgreSQL
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  labels:
    app: postgresdb
spec:
  type: ClusterIP # Default, suitable for internal communication
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgresdb

---
# Deployment for mcp_dbstore
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcpdbstore-deployment
  labels:
    app: mcpdbstore
spec:
  replicas: 1 # Adjust as needed
  selector:
    matchLabels:
      app: mcpdbstore
  template:
    metadata:
      labels:
        app: mcpdbstore
    spec:
      containers:
        - name: mcpdbstore
          image: quay.io/ecosystem-appeng/mcp-dbstore:latest
          ports:
            - containerPort: 8001
          env:
            - name: MCP_STORE_DATABASE_URL
              value: "postgresql+asyncpg://myuser:mypassword@postgres-service:5432/store_db"
            # Add any other necessary environment variables for mcp_dbstore here
            # Example:
            # - name: MCP_STORE_SOME_OTHER_CONFIG
            #   value: "some_value"
          # Liveness and Readiness Probes are highly recommended for production
          # readinessProbe:
          #   httpGet:
          #     path: /health # Assuming you have a health check endpoint
          #     port: 8002
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
          # livenessProbe:
          #   httpGet:
          #     path: /health
          #     port: 8002
          #   initialDelaySeconds: 15
          #   periodSeconds: 20

---
# Service for mcp_dbstore
apiVersion: v1
kind: Service
metadata:
  name: mcpdbstore-service
  labels:
    app: mcpdbstore
spec:
  type: ClusterIP # Or LoadBalancer/NodePort if you need external access
  ports:
    - port: 8000 # The port the service will expose
      targetPort: 8000 # The port your mcp_dbstore container is listening on
      protocol: TCP
      # name: http # Optional: name for the port
  selector:
    app: mcpdbstore
